apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'com.github.triplet.play'




dependencies {
    compile project(':core')
    compile project(':libgif')
    compile project(':libsuperslim')
    compile project(':picasso')


    testCompile 'junit:junit:4.12'
    testCompile "org.mockito:mockito-core:1.10.19"
    testCompile 'org.powermock:powermock-module-junit4:1.6.2'
    testCompile 'org.powermock:powermock-module-test-easymock-junit410:1.6.2'
    testCompile  'org.easymock:easymock:3.3.1'
//    androidTestCompile('org.mockito:mockito-core:1.9.5'){
//        exclude group: 'org.hamcrest'
//    }
//
//    androidTestCompile('org.powermock:powermock-module-junit4:1.5'){
//        exclude group: 'org.hamcrest'
//    }
    compile project.photo_view
    provided project.dagger_compiler
}


android {
    defaultConfig {
        versionName "1.0.44"
        versionCode 44
        applicationId "ru.korniltsev.telegram"
    }

    def storePathStr = System.getenv("KSTOREPATH")
    def storePasswordStr = System.getenv("KSTOREPWD")
    def keyPasswordStr = System.getenv("KEYPWD")

    if (storePathStr != null) {
        signingConfigs {
            release {
                storeFile new File(storePathStr)
                storePassword storePasswordStr
                keyPassword keyPasswordStr
                keyAlias "telegram.tdlib.chalange"
            }
        }

        buildTypes {
            release {
                signingConfig signingConfigs.release
                minifyEnabled false
            }
        }
    }
    dexOptions {
        incremental true
        preDexLibraries false
    }
}

def serviceAccountEmailStr = System.getenv("SYSTEM_ACCOUNT_EMAIL")
def pk12FilePath = System.getenv("PK_12_FILE_PATH")


if (serviceAccountEmailStr && pk12FilePath) {
    play {
        serviceAccountEmail = serviceAccountEmailStr
        pk12File = new File(pk12FilePath)
        track = 'production'
    }
}

