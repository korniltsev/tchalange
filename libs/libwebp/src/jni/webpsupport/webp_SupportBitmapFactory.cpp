/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include "jni_load.h"

#include <stdio.h>
#include <string.h>
#include <android/bitmap.h>
#include <android/log.h>
#include <webp/decode.h>
#include <webp/encode.h>
/* Header for class webp_SupportBitmapFactory */

#ifndef _Included_webp_SupportBitmapFactory
#define _Included_webp_SupportBitmapFactory
#ifdef __cplusplus
extern "C" {
#endif
/*
 * Class:     webp_SupportBitmapFactory
 * Method:    nativeDecodeBitmap
 * Signature: (Ljava/nio/ByteBuffer;I)Landroid/graphics/Bitmap;
 */
JNIEXPORT jobject JNICALL Java_webp_SupportBitmapFactory_nativeDecodeBitmap
  (JNIEnv *env, jclass cls, jobject buffer, jint length)
  {
  	if (!buffer) {
          env->ThrowNew(jrefs::java::lang::NullPointerException->jclassRef, "buffer == null");
          return 0;
      }

      void *inputBuffer = env->GetDirectBufferAddress( buffer);
      int bitmapWidth = 0;
      int bitmapHeight = 0;
      if (!WebPGetInfo((uint8_t*)inputBuffer, length, &bitmapWidth, &bitmapHeight)) {
          env->ThrowNew(jrefs::java::lang::RuntimeException->jclassRef, "WebPGetInfo error");
          return 0;
      }

      jobject value__ARGB_8888 = env->GetStaticObjectField(jrefs::android::graphics::Bitmap->Config.jclassRef, jrefs::android::graphics::Bitmap->Config.ARGB_8888);
      jobject outputBitmap = env->CallStaticObjectMethod(jrefs::android::graphics::Bitmap->jclassRef, jrefs::android::graphics::Bitmap->createBitmap,
          		(jint)bitmapWidth, (jint)bitmapHeight,
          		value__ARGB_8888);
      if (!outputBitmap) {
              env->ThrowNew( jrefs::java::lang::RuntimeException->jclassRef, "Bitmap.create() == null");
              return 0;
      }
      outputBitmap = env->NewLocalRef(outputBitmap);

      AndroidBitmapInfo bitmapInfo;
      if (AndroidBitmap_getInfo(env, outputBitmap, &bitmapInfo) != ANDROID_BITMAP_RESUT_SUCCESS) {
          env->DeleteLocalRef( outputBitmap);
          env->ThrowNew( jrefs::java::lang::RuntimeException->jclassRef, "Failed to get Bitmap information");
          return 0;
      }

      void *bitmapPixels = 0;
          if (AndroidBitmap_lockPixels(env, outputBitmap, &bitmapPixels) != ANDROID_BITMAP_RESUT_SUCCESS) {
              env->DeleteLocalRef( outputBitmap);
              env->ThrowNew(jrefs::java::lang::RuntimeException->jclassRef, "Failed to lock Bitmap pixels");
              return 0;
          }

          ///


      if (!WebPDecodeRGBAInto((uint8_t*)inputBuffer, length, (uint8_t*)bitmapPixels, bitmapInfo.height * bitmapInfo.stride, bitmapInfo.stride)) {
          AndroidBitmap_unlockPixels(env, outputBitmap);
          env->DeleteLocalRef( outputBitmap);
          env->ThrowNew( jrefs::java::lang::RuntimeException->jclassRef, "Failed to unlock Bitmap pixels");
          return 0;
      }

      if (AndroidBitmap_unlockPixels(env, outputBitmap) != ANDROID_BITMAP_RESUT_SUCCESS) {
          env->DeleteLocalRef( outputBitmap);
          env->ThrowNew( jrefs::java::lang::RuntimeException->jclassRef, "Failed to unlock Bitmap pixels");
          return 0;
      }
      return outputBitmap;

  }

#ifdef __cplusplus
}
#endif
#endif
