/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

#include <ogg/ogg.h>
#include <stdio.h>
#include <opus.h>
#include <stdlib.h>
#include <time.h>
#include <opusfile.h>

//#include <algorithm>

/* Header for class opus_OpusSupport */

#ifndef _Included_opus_OpusSupport
#define _Included_opus_OpusSupport
#ifdef __cplusplus
extern "C" {
#endif

int max(int a, int b){
    if (a > b) return a;
    return b;
}

//player
OggOpusFile *_opusFile;
int _isSeekable = 0;
int64_t _totalPcmDuration = 0;
int64_t _currentPcmOffset = 0;
int _finished = 0;
static const int playerBuffersCount = 3;
static const int playerSampleRate = 48000;


void cleanupPlayer() {
    if (_opusFile) {
        op_free(_opusFile);
        _opusFile = 0;
    }
    _isSeekable = 0;
    _totalPcmDuration = 0;
    _currentPcmOffset = 0;
    _finished = 0;
}


int initPlayer(const char *path) {
    cleanupPlayer();

    int openError = OPUS_OK;
    _opusFile = op_open_file(path, &openError);
    if (!_opusFile || openError != OPUS_OK) {
        //LOGE("op_open_file failed: %d", openError);
        cleanupPlayer();
        return 0;
    }

    _isSeekable = op_seekable(_opusFile);
    _totalPcmDuration = op_pcm_total(_opusFile, -1);

    return 1;
}

void fillBuffer(void *buffer, int capacity, int *args) {
    if (_opusFile) {
        args[1] = max(0, op_pcm_tell(_opusFile));

        if (_finished) {
            args[0] = 0;
            args[1] = 0;
            args[2] = 1;
            return;
        } else {
            int writtenOutputBytes = 0;
            int endOfFileReached = 0;

            while (writtenOutputBytes < capacity) {
                int readSamples = op_read(_opusFile, (opus_int16 *)(buffer + writtenOutputBytes), (capacity - writtenOutputBytes) / 2, NULL);

                if (readSamples > 0) {
                    writtenOutputBytes += readSamples * 2;
                } else {
                    if (readSamples < 0) {
                        //LOGE("op_read failed: %d", readSamples);
                    }
                    endOfFileReached = 1;
                    break;
                }
            }

            args[0] = writtenOutputBytes;

            if (endOfFileReached || args[1] + args[0] == _totalPcmDuration) {
                _finished = 1;
                args[2] = 1;
            } else {
                args[2] = 0;
            }
        }
    } else {
        memset(buffer, 0, capacity);
        args[0] = capacity;
        args[1] = _totalPcmDuration;
    }
}

int seekPlayer(float position) {
    if (!_opusFile || !_isSeekable || position < 0) {
        return 0;
    }
    int result = op_pcm_seek(_opusFile, (ogg_int64_t)(position * _totalPcmDuration));
    if (result != OPUS_OK) {
//        LOGE("op_pcm_seek failed: %d", result);
    }
    ogg_int64_t pcmPosition = op_pcm_tell(_opusFile);
    _currentPcmOffset = pcmPosition;
    return result == OPUS_OK;
}




/*
 * Class:     opus_OpusSupport
 * Method:    nativeIsOpusFile
 * Signature: (Ljava/lang/String;)I
 */
JNIEXPORT jboolean JNICALL Java_opus_OpusSupport_nativeIsOpusFile
  (JNIEnv *env, jclass cls, jstring path)
  {
  const char *pathStr = env->GetStringUTFChars( path, 0);

      int result = 0;

      int error = OPUS_OK;
      OggOpusFile *file = op_test_file(pathStr, &error);
      if (file != NULL) {
          int error = op_test_open(file);
          op_free(file);

          result = error == OPUS_OK;
      }

      if (pathStr != 0) {
          env->ReleaseStringUTFChars( path, pathStr);
      }
      return result;
  }

  /*
   * Class:     opus_OpusSupport
   * Method:    nativeOpenOpusFile
   * Signature: (Ljava/lang/String;)Z
   */
  JNIEXPORT jboolean JNICALL Java_opus_OpusSupport_nativeOpenOpusFile
    (JNIEnv * env, jclass cls, jstring path)
    {
        const char *pathStr = env->GetStringUTFChars( path, 0);

        int result = initPlayer(pathStr);

        if (pathStr != 0) {
            env->ReleaseStringUTFChars( path, pathStr);
        }

        return result;
    }

    /*
     * Class:     opus_OpusSupport
     * Method:    nativeCloseOpusFile
     * Signature: ()V
     */
    JNIEXPORT void JNICALL Java_opus_OpusSupport_nativeCloseOpusFile
      (JNIEnv *, jclass)
      {
        cleanupPlayer();
      }

    /*
     * Class:     opus_OpusSupport
     * Method:    nativeGetTotalPcmDuration
     * Signature: ()J
     */
    JNIEXPORT jlong JNICALL Java_opus_OpusSupport_nativeGetTotalPcmDuration
      (JNIEnv *, jclass){
        return _totalPcmDuration;
      }

    /*
     * Class:     opus_OpusSupport
     * Method:    nativeReadOpusFile
     * Signature: (Ljava/nio/ByteBuffer;I[I)V
     */
    JNIEXPORT void JNICALL Java_opus_OpusSupport_nativeReadOpusFile
      (JNIEnv *env, jclass cls, jobject buffer, jint capacity, jintArray args)
      {
        jint *argsArr = env->GetIntArrayElements( args, 0);
        void* bufferBytes = env->GetDirectBufferAddress( buffer);
        fillBuffer(bufferBytes, capacity, argsArr);
        env->ReleaseIntArrayElements( args, argsArr, 0);
      }

    /*
     * Class:     opus_OpusSupport
     * Method:    nativeSeekOpusFile
     * Signature: (F)Z
     */
    JNIEXPORT jboolean JNICALL Java_opus_OpusSupport_nativeSeekOpusFile
      (JNIEnv * env, jclass cls, jfloat position){
         return seekPlayer(position);
      }



#ifdef __cplusplus
}
#endif
#endif
